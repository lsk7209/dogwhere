// 클라우드플레어 Workers 설정
export default {
  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {
    const url = new URL(request.url);
    
    // CORS 설정
    const corsHeaders = {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    };

    // OPTIONS 요청 처리
    if (request.method === 'OPTIONS') {
      return new Response(null, { headers: corsHeaders });
    }

    // API 라우팅
    if (url.pathname.startsWith('/api/')) {
      return handleApiRequest(request, env, ctx);
    }

    // 정적 파일 서빙
    return new Response('Not Found', { status: 404 });
  },
};

async function handleApiRequest(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {
  const url = new URL(request.url);
  
  try {
    // D1 데이터베이스 연결
    const db = env.DB;
    
    switch (url.pathname) {
      case '/api/places':
        return await handlePlacesApi(request, db);
      case '/api/places/[slug]':
        return await handlePlaceDetailApi(request, db);
      default:
        return new Response('API endpoint not found', { status: 404 });
    }
  } catch (error) {
    console.error('API Error:', error);
    return new Response('Internal Server Error', { status: 500 });
  }
}

async function handlePlacesApi(request: Request, db: D1Database): Promise<Response> {
  if (request.method === 'GET') {
    const { searchParams } = new URL(request.url);
    const sido = searchParams.get('sido');
    const category = searchParams.get('category');
    
    let query = 'SELECT * FROM places WHERE 1=1';
    const params: any[] = [];
    
    if (sido) {
      query += ' AND sido = ?';
      params.push(sido);
    }
    
    if (category) {
      query += ' AND category = ?';
      params.push(category);
    }
    
    query += ' ORDER BY rating DESC LIMIT 20';
    
    const result = await db.prepare(query).bind(...params).all();
    
    return new Response(JSON.stringify({
      success: true,
      data: result.results
    }), {
      headers: { 'Content-Type': 'application/json' }
    });
  }
  
  return new Response('Method not allowed', { status: 405 });
}

async function handlePlaceDetailApi(request: Request, db: D1Database): Promise<Response> {
  if (request.method === 'GET') {
    const url = new URL(request.url);
    const slug = url.pathname.split('/').pop();
    
    const result = await db.prepare('SELECT * FROM places WHERE slug = ?').bind(slug).first();
    
    if (!result) {
      return new Response('Place not found', { status: 404 });
    }
    
    return new Response(JSON.stringify({
      success: true,
      data: result
    }), {
      headers: { 'Content-Type': 'application/json' }
    });
  }
  
  return new Response('Method not allowed', { status: 405 });
}

interface Env {
  DB: D1Database;
  KV: KVNamespace;
  R2: R2Bucket;
}
